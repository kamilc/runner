syntax = "proto3";

package service;

service Runner {
  rpc Run(RunRequest) returns (RunResponse) {}
  rpc Stop(StopRequest) returns (StopResponse) {}
  rpc Status(StatusRequest) returns (StatusResponse) {}
  rpc Log(LogRequest) returns (stream LogResponse) {}
}

enum GeneralError {
  AUTHORIZATION_ERROR = 0;
  OS_ERROR = 1;
}

message RunRequest {
  string command = 1;

  // following oneof's are to make these optional
  // now that optional isn't available in Proto3

  oneof memory {
    uint64 max_memory = 2;
  }

  oneof cpu {
    uint64 max_cpu = 3;
  }

  oneof disk {
    uint64 max_disk = 4;
  }

  repeated string arguments = 5;
}

message RunResponse {
  message Error {
    enum RunError {
      NAME_EMPTY_ERROR = 0;
      ARG_EMPTY_ERROR = 1;
      INVALID_MAX_MEMORY = 2;
      INVALID_MAX_CPU = 3;
      INVALID_DISK_MINOR = 4;
      INVALID_DISK_MAJOR = 5;
      INVALID_MAX_DISK = 6;
    }

    string description = 1;

    oneof errors {
      GeneralError general_error = 2;
      RunError run_error = 3;
    }
  }

  oneof results {
    string id = 1;
    Error error = 2;
  }
}

message StopRequest {
  string id = 1;
}

message StopResponse {
  message Error {
    enum StopError {
      PROCESS_NOT_FOUND_ERROR = 0;
      PROCESS_ALREADY_STOPPED_ERROR = 1;
      COULDNT_STOP_ERROR = 2;
    }

    string description = 1;

    oneof errors {
      GeneralError general_error = 2;
      StopError stop_error = 3;
    }
  }

  Error error = 1;
}

message StatusRequest {
  string id = 1;
}

message StatusResponse {
  message Error {
    enum StatusError {
      PROCESS_NOT_FOUND_ERROR = 0;
    }

    string description = 1;

    oneof errors {
      GeneralError general_error = 2;
      StatusError status_error = 3;
    }
  }

  enum Status {
    RUNNING = 0;
    STOPPED = 1;
  }

  message StatusResult {
    Status status = 1;
    uint32 exit_code = 2;
  }

  oneof results {
    StatusResult result = 1;
    Error error = 2;
  }
}

message LogRequest {
  string id = 1;

  enum Descriptor {
    STDOUT = 0;
    STDERR = 1;
  }

  Descriptor descriptor = 2;
}

message LogResponse {
  message Error {
    enum LogError {
      PROCESS_NOT_FOUND_ERROR = 0;
    }

    string description = 1;

    oneof errors {
      GeneralError general_error = 2;
      LogError log_error = 3;
    }
  }

  oneof results {
    string data = 1;
    Error error = 2;
  }
}
