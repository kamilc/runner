syntax = "proto3";

package service;

service Runner {
  rpc Run(RunRequest) returns (RunResponse) {}
  rpc Stop(StopRequest) returns (StopResponse) {}
  rpc Status(StatusRequest) returns (StatusResponse) {}
  rpc Log(LogRequest) returns (stream LogResponse) {}
}

enum GeneralError {
  AUTHORIZATION_ERROR = 0;
  OS_ERROR = 1;
  INTERNAL_ERROR = 2;
}

message RunRequest {
  string command = 1;

  // following oneof's are to make these optional
  // now that optional isn't available in Proto3

  oneof memory {
    uint64 max_memory = 2;
  }

  oneof cpu {
    uint64 max_cpu = 3;
  }

  oneof disk {
    uint64 max_disk = 4;
  }

  repeated string arguments = 5;
}

message RunResponse {
  message RunError {
    enum Error {
      NAME_EMPTY_ERROR = 0;
      ARG_EMPTY_ERROR = 1;
      INVALID_MAX_DISK = 6;
    }

    string description = 1;

    oneof errors {
      GeneralError general_error = 2;
      Error run_error = 3;
    }
  }

  oneof results {
    string id = 1;
    RunError error = 2;
  }
}

message StopRequest {
  string id = 1;
}

message StopResponse {
  message StopError {
    enum Error {
      PROCESS_NOT_FOUND_ERROR = 0;
      PROCESS_ALREADY_STOPPED_ERROR = 1;
      COULDNT_STOP_ERROR = 2;
      INVALID_ID = 3;
    }

    string description = 1;

    oneof errors {
      GeneralError general_error = 2;
      Error stop_error = 3;
    }
  }

  StopError error = 1;
}

message StatusRequest {
  string id = 1;
}

message StatusResponse {
  message StatusError {
    enum Error {
      PROCESS_NOT_FOUND_ERROR = 0;
      INVALID_ID = 1;
    }

    string description = 1;

    oneof errors {
      GeneralError general_error = 2;
      Error status_error = 3;
    }
  }

  message StatusResult {
    message ExitResult {
      oneof exit {
        int32 code = 1;
      }

      oneof kill {
        int32 signal = 2;
      }
    }

    // encode "running" as no <finish> here
    // and "stopped" otherwise
    oneof finish {
      ExitResult result = 1;
    }
  }

  oneof results {
    StatusResult result = 1;
    StatusError error = 2;
  }
}

message LogRequest {
  string id = 1;

  enum Descriptor {
    STDOUT = 0;
    STDERR = 1;
  }

  Descriptor descriptor = 2;
}

message LogResponse {
  message LogError {
    enum Error {
      PROCESS_NOT_FOUND_ERROR = 0;
      INVALID_ID = 1;
    }

    string description = 1;

    oneof errors {
      GeneralError general_error = 2;
      Error log_error = 3;
    }
  }

  oneof results {
    bytes data = 1;
    LogError error = 2;
  }
}
